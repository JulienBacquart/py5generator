@@ meta
name = pixel_density()
category = Environment
subcategory = None
type = None
processing_name = pixelDensity

@@ description
This function is new with Processing 3.0. It makes it possible for Processing to render using all of the pixels on high resolutions screens like Apple Retina displays and Windows High-DPI displays. This function can only be run once within a program and it must be used right after ``size()`` in a program without a ``setup()`` and used within ``setup()`` when a program has one.  The ``pixel_density()`` should only be used with hardcoded numbers (in almost all cases this number will be 2) or in combination with ``display_density()`` as in the third example above.

When the pixel density is set to more than 1, it changes all of the pixel operations including the way ``get()``, ``set()``, ``blend()``, ``copy()``, and ``update_pixels()`` all work. See the reference for ``pixel_width`` and ``pixel_height`` for more information. 

To use variables as the arguments to ``pixel_density()`` function, place the ``pixel_density()`` function within the ``settings()`` function. There is more information about this on the ``settings()`` reference page.

@@ example
size(100, 100)
pixelDensity(2)
noStroke()
background(0)
ellipse(30, 48, 36, 36)
ellipse(70, 48, 36, 36)

@@ example
void setup() {
  size(100, 100)
  pixelDensity(2)
  noStroke()
}

void draw() {
  background(0)
  ellipse(30, 48, 36, 36)
  ellipse(70, 48, 36, 36)
}

@@ example
void setup() {
  size(100, 100)
  # Pulling the display's density dynamically
  pixelDensity(displayDensity())
  noStroke()
}

void draw() {
  background(0)
  ellipse(30, 48, 36, 36)
  ellipse(70, 48, 36, 36)
}
