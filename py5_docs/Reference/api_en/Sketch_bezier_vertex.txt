@@ meta
name = bezier_vertex()
category = shape
subcategory = vertex
type = method
pclass = PApplet
processing_name = bezierVertex

@@ signatures
bezier_vertex(x2: float, y2: float, x3: float, y3: float, x4: float, y4: float, /) -> None
bezier_vertex(x2: float, y2: float, z2: float, x3: float, y3: float, z3: float, x4: float, y4: float, z4: float, /) -> None

@@ variables
x2: float - the x-coordinate of the 1st control point
x3: float - the x-coordinate of the 2nd control point
x4: float - the x-coordinate of the anchor point
y2: float - the y-coordinate of the 1st control point
y3: float - the y-coordinate of the 2nd control point
y4: float - the y-coordinate of the anchor point
z2: float - the z-coordinate of the 1st control point
z3: float - the z-coordinate of the 2nd control point
z4: float - the z-coordinate of the anchor point

@@ description
Specifies vertex coordinates for Bezier curves. Each call to `bezier_vertex()` defines the position of two control points and one anchor point of a Bezier curve, adding a new segment to a line or shape. The first time `bezier_vertex()` is used within a [](sketch_begin_shape) call, it must be prefaced with a call to [](sketch_vertex) to set the first anchor point. This function must be used between [](sketch_begin_shape) and [](sketch_end_shape) and only when there is no `MODE` parameter specified to [](sketch_begin_shape). Using the 3D version requires rendering with `P3D`.

@@ example
image = Sketch_bezier_vertex_0.png

def setup():
    py5.no_fill()
    py5.begin_shape()
    py5.vertex(30, 20)
    py5.bezier_vertex(80, 0, 80, 75, 30, 75)
    py5.end_shape()

@@ example
image = Sketch_bezier_vertex_1.png

def setup():
    py5.begin_shape()
    py5.vertex(30, 20)
    py5.bezier_vertex(80, 0, 80, 75, 30, 75)
    py5.bezier_vertex(50, 80, 60, 25, 30, 20)
    py5.end_shape()
