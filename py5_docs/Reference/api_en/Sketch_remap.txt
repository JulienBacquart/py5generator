@@ meta
name = remap()
type = method
category = math
subcategory = calculation

@@ signatures
remap(value: float, start1: float, stop1: float, start2: float, stop2: float) -> float

@@ variables
start1: float - lower bound of the value's current range
start2: float - upper bound of the value's current range
stop1: float - lower bound of the value's target range
stop2: float - upper bound of the value's target range
value: float - the incoming value to be converted

@@ description
Re-maps a number from one range to another.

In the first example, the number 25 is converted from a value in the range of 0 to 100 into a value that ranges from the left edge of the window (0) to the right edge (:doc:`width`).

As shown in the second example, numbers outside of the range are not clamped to the minimum and maximum parameters values, because out-of-range values are often intentional and useful. If that isn't what you want, try pairing this function with :doc:`constrain`.

This function is called ``map()`` in Processing but was renamed because of a name conflict in Python.

@@ example
def settings():
    py5.size(200, 200)


def setup():
    value = 25
    m = py5.remap(value, 0, 100, 0, py5.width)
    py5.ellipse(m, 200, 10, 10)

@@ example
def setup():
    value = 110
    m = py5.remap(value, 0, 100, -20, -10)
    println(m)  # Prints "-9.0"

@@ example
def settings():
    py5.size(200, 200)


def setup():
    py5.no_stroke()


def draw():
    py5.background(204)
    x1 = py5.remap(py5.mouse_x, 0, py5.width, 50, 150)
    py5.ellipse(x1, 75, 50, 50)
    x2 = py5.remap(py5.mouse_x, 0, py5.width, 0, 200)
    py5.ellipse(x2, 125, 50, 50)
