@@ meta
name = %%py5draw
type = cell magic
category = magics
subcategory = cell magics

@@ arguments
'width', type=int
width of PNG image

'height', type=int
height of PNG image

'-f', '--filename', dest='filename'
save image to file

'-v', '--var', dest='variable'
assign image to variable

'-r', '--renderer', type=str, dest='renderer', default='HIDDEN'
processing renderer to use for Sketch

'--unsafe', dest='unsafe', action='store_true'
allow new variables to enter the global namespace

@@ description
Create a PNG image with py5 and embed the result in the notebook.

For users who are familiar with Processing and py5 programming, you can pretend the code in this cell will be executed in a Sketch with no ``draw()`` function and your code in the ``setup()`` function. By default it will use the default Processing renderer.

On OSX, only the default renderer is currently supported. Other platforms support the default renderer and the OpenGL renderers (P2D and P3D).

Internally this magic command creates a static Sketch using the user provided code. The static Sketch drawing surface does not allow transparency. If you want to quickly create an image that has transparency, consider using :doc:`render` or :doc:`render_frame` with the ``use_py5graphics`` parameter.

Code used in this cell can reference functions and variables defined in other cells. By default, variables and functions created in this cell will be local to only this cell because to do otherwise would be unsafe. If you understand the risks, you can use the ``global`` keyword to add a single function or variable to the notebook namespace or the ``--unsafe`` argument to add everything to the notebook namespace. Either option may be very useful to you, but be aware that using py5 objects in a different notebook cell or reusing them in another Sketch can result in nasty errors and bizzare consequences.

@@ example
image = Py5Magics_py5draw_0.png

%%py5draw 100 100
py5.background(128)
py5.fill(255, 0, 0)
py5.rect(40, 50, 25, 25)
