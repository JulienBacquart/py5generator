@@ meta
name = %%py5drawdxf
type = cell magic
category = magics
subcategory = cell magics

@@ arguments
'width', type=int
width of DXF output

'height', type=int
height of DXF output

'filename', type=str
filename for DXF output

'--unsafe', dest='unsafe', action='store_true'
allow new variables to enter the global namespace

@@ description
Create a DXF file with py5.

For users who are familiar with Processing and py5 programming, you can pretend the code in this cell will be executed in a sketch with no ``draw()`` function and your code in the ``setup()`` function. It will use the ``DXF`` renderer.

As this is creating a DXF file, your code will be limited to the capabilities of that renderer.

Code used in this cell can reference functions and variables defined in other cells. By default, variables and functions created in this cell will be local to only this cell because to do otherwise would be unsafe. If you understand the risks, you can use the ``global`` keyword to add a single function or variable to the notebook namespace or the ``--unsafe`` argument to add everything to the notebook namespace. Either option may be very useful to you, but be aware that using py5 objects in a different notebook cell or reusing them in another sketch can result in nasty errors and bizzare consequences.

@@ example
%%py5drawdxf 200 200 /tmp/test.dxf
py5.translate(py5.width / 2, py5.height / 2)
py5.rotate_x(0.4)
py5.rotate_y(0.8)
py5.box(80)
