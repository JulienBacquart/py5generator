@@ meta
name = begin_shape()
category = drawing
subcategory = None
type = method
pclass = PShape
processing_name = beginShape

@@ signatures
begin_shape() -> None
begin_shape(kind: int, /) -> None

@@ variables
kind: int - Either POINTS, LINES, TRIANGLES, TRIANGLE_FAN, TRIANGLE_STRIP, QUADS, or QUAD_STRIP

@@ description
This method is used to start a custom shape created with the :doc:`sketch_create_shape` function. It's always and only used with :doc:`sketch_create_shape`.

Drawing commands to a custom shape must always conclude with a call to the :doc:`py5shape_end_shape` method. This method can be used as a context manager to ensure that :doc:`py5shape_end_shape` always gets called, as shown in the second example. Use :doc:`py5shape_begin_closed_shape` to create a context manager that will pass the ``CLOSE`` parameter to :doc:`sketch_end_shape`, closing the shape.

@@ example
def setup():
    global s  # the Py5Shape object
    s = py5.create_shape()
    s.begin_shape()
    s.fill("#F00")
    s.no_stroke()
    s.vertex(0, 0)
    s.vertex(0, 50)
    s.vertex(50, 0)
    s.end_shape()


def draw():
    py5.shape(s, 25, 25)

@@ example
def setup():
    global s  # the Py5Shape object
    s = py5.create_shape()
    with s.begin_shape():
        s.fill("#F00")
        s.no_stroke()
        s.vertex(0, 0)
        s.vertex(0, 50)
        s.vertex(50, 0)


def draw():
    py5.shape(s, 25, 25)
